101 second street

*interview core concepts

  how does a website work?
  primitive values
  static vs dynamic languages
  strictly typed vs loosely typed languages
  what are the different ways to hide an element on the screen
  what is garbage collection

javaScript
  what is prototype inheritence?
  what are closures?

****************************************************************************************************
Big O notation

  what is it?

  Compares efficiency of space and time
  A way to compare the theroretical amount of time a program will run.
  Constants and smaller components are ignored.
  we are usually taking about the worst case, it is implied
  asymptotic complexities of common runtimes 
  analyzing the runtime of different algorythms

  what is the difference between time complexity and space complexity?
    time complexity measures the theoretical time a program needs to run
    space complexity measures the amount of space in memory a protram needs to run


  O(1)        constant time
              the size of the inputs dosen't matter, a set number of operations will always happen regardless of inputs

  O(n)        linear time 
              a data set is iterated over
              the size of the inputs or data set affects how many times an iteration is run

  O(n**2)     quadratic time 
              nested loops
              runs an iteration inside of an iteration
              n**3 is three nested loops ect
              if a loop is constant time it is not count as additional loops so two loops could still be O(n)

  O(log(n))   


  O(nlog(n))  



// 1.
function logUpTo(n) {
  for (var i = 1; i <= n; i++) {
    console.log(i);
  }
}

time complexity  => O(n) linear time
space complexity => O(1) constant time

// 2.
function logAtMost10(n) {
  for (var i = 1; i <= Math.min(n, 10); i++) {
    console.log(i);
  }
}

time complexity  => O(1) constant time
space complexity => O(1) constant time

// 3.
function logAtLeast10(n) {
  for (var i = 1; i <= Math.max(n, 10); i++) {
    console.log(i);
  }
}

time complexity  => O(n) linear time
space complexity => O(1) constant time

// 4.
function onlyElementsAtEvenIndex(array) {
  var newArray = Array(Math.ceil(array.length / 2));
  for (var i = 0; i < array.length; i++) {
    if (i % 2 === 0) {
      newArray[i / 2] = array[i];
    }
  }
  return newArray;
}

time complexity  => O(n) linear time
space complexity => O(n) linear time

// 5.
function subtotals(array) {
  var subtotalArray = Array(array.length);
  for (var i = 0; i < array.length; i++) {
    var subtotal = 0;
    for (var j = 0; j <= i; j++) {
      subtotal += array[j];
    }
    subtotalArray[i] = subtotal;
  }
  return subtotalArray;
}

console.log(subtotals([2, 5, 4, 7]));

time complexity  => O(n**2)
space complexity => O(n) linear time


****************************************************************************************************
Recursion

  what is it?

  Recursion is a where a function calles itself
  Key feature of recursion is that there must be a base case
  When using recursion you also must pay close attention to the call stack

  what happens if you don't have a base case?
    You will keep adding a requst to the call stack until you run out of memory and the stack overflows

  recursion is often used with deeply nested objects


  helper method recursion

    a recursive function inside of a recursive function 
      that takes a copy (slice()) of the original array and mutates it through recursion
      see cs_practice_problems/helper_method_recursion.js

